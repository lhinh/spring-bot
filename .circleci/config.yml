# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
executors:
  docker-publisher:
    environment:
        IMAGE_NAME: spring-bot
    docker:
        - image: cimg/openjdk:21.0
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-test-docker-push: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-test:
          filters:
            branches:
              only:
                - main
                - dev
                - test-build-deploy
      - docker-push:
          requires:
            - build-test
          filters:
            branches:
              only:
                - main
                - test-build-deploy


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-test:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    executor: docker-publisher
    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - setup_remote_docker
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build JAR
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      - run:
          name: Build and archive Docker image
          command: |
            docker build -t $IMAGE_NAME .
            docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-push:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Push Docker image
          command: |
            echo "$DOCKERHUB_PAT" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $IMAGE_NAME "$DOCKERHUB_USERNAME"/"$IMAGE_NAME"
            docker push "$DOCKERHUB_USERNAME"/"$IMAGE_NAME"